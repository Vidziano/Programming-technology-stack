# word_frequency_analyzer.rb
require 'optparse'

# –ö–ª–∞—Å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —á–∞—Å—Ç–æ—Ç–∏ —Å–ª—ñ–≤
class WordFrequencyAnalyzer
  attr_reader :file_path

  def initialize(file_path)
    @file_path = file_path
  end

  def analyze
    validate_file!

    word_count = Hash.new(0)

    # –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É —Ç–∞ –æ–±—Ä–æ–±–∫–∞ —Å–ª—ñ–≤
    File.foreach(file_path) do |line|
      words = extract_words(line)
      words.each { |word| word_count[word] += 1 }
    end

    sorted_word_count = sort_word_count(word_count)
    display_results(sorted_word_count)
  end

  private

  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª
  def validate_file!
    unless File.exist?(file_path)
      raise IOError, "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: #{@file_path}"
    end

    unless File.file?(file_path)
      raise IOError, "–í–∫–∞–∑–∞–Ω–∏–π —à–ª—è—Ö –Ω–µ —î —Ñ–∞–π–ª–æ–º: #{@file_path}"
    end

    unless File.readable?(file_path)
      raise IOError, "–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è: #{@file_path}"
    end
  end

  # –í–∏—Ç—è–≥—É—î–º–æ —Å–ª–æ–≤–∞ –∑ —Ä—è–¥–∫–∞
  def extract_words(line)
    line.downcase.scan(/\b[\w']+\b/)
  end

  # –°–æ—Ä—Ç—É—î–º–æ —Å–ª–æ–≤–∞ –∑–∞ —á–∞—Å—Ç–æ—Ç–æ—é —Ç–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º
  def sort_word_count(word_count)
    word_count.sort_by { |word, count| [-count, word] }
  end

  # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –∫–æ–Ω—Å–æ–ª—å
  def display_results(sorted_word_count)
    puts "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É (—Ñ–∞–π–ª: #{@file_path}):"
    puts "-" * 50
    sorted_word_count.each do |word, count|
      puts "#{word.ljust(20)}: #{count}"
    end
    puts "-" * 50
  end
end

# –ö–ª–∞—Å –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
class InteractiveMenu
  def start
    loop do
      print_menu
      choice = gets.chomp.to_i

      case choice
      when 1
        process_analyze_file
      when 2
        display_help
      when 3
        puts "–î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è! –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã"
        break
      else
        puts "–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
      end
    end
  end

  private

  def print_menu
    puts "\n=== –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –ß–∞—Å—Ç–æ—Ç–∏ –°–ª—ñ–≤ ==="
    puts "1. –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª"
    puts "2. –î–æ–ø–æ–º–æ–≥–∞"
    puts "3. –í–∏–π—Ç–∏"
    print "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é: "
  end

  def process_analyze_file
    print "–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É: "
    file_path = gets.chomp

    begin
      analyzer = WordFrequencyAnalyzer.new(file_path)
      analyzer.analyze
    rescue IOError => e
      puts "–ü–æ–º–∏–ª–∫–∞: #{e.message}"
    rescue => e
      puts "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: #{e.message}"
    end
  end

  def display_help
    puts "\n=== –î–æ–ø–æ–º–æ–≥–∞ ==="
    puts "–¶—è —É—Ç–∏–ª—ñ—Ç–∞ –¥–æ–∑–≤–æ–ª—è—î –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª —ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —á–∞—Å—Ç–æ—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–ª—ñ–≤ —É –Ω—å–æ–º—É."
    puts "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:"
    puts "1. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é '–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª'."
    puts "2. –í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'example.txt')."
    puts "3. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É –∑—ñ —Å–ª–æ–≤–∞–º–∏ —Ç–∞ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—é."
    puts "\n–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é '–í–∏–π—Ç–∏'."
  end
end

# –£ –∫—ñ–Ω—Ü—ñ —Ñ–∞–π–ª—É PR_8.rb
if __FILE__ == $PROGRAM_NAME
  # –ó–∞–ø—É—Å–∫ –º–µ–Ω—é –ª–∏—à–µ –ø—Ä–∏ –ø—Ä—è–º–æ–º—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É
  InteractiveMenu.new.start
end

